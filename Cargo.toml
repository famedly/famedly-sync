[package]
name = "famedly-sync"
version = "0.6.0"
authors = []
edition = "2021"
publish = false

[dependencies]
anyhow = { version = "1.0.81", features = ["backtrace"] }
async-trait = "0.1.82"
base64 = "0.22.1"
chrono = "0.4.19"
config = { version = "0.14.0" }
http = "1.1.0"
# error-stack = "0.4.1"
ldap-poller = { git = "https://github.com/famedly/ldap-poller", version = "0.1.0" }
serde = { version = "1.0.203", features = ["derive"] }
serde_json = "1.0.127"
tokio = { version = "1.35.1", features = ["macros", "rt-multi-thread", "sync", "time", "fs", "rt"] }
tokio-stream = "0.1.15"
tracing = "0.1.40"
tracing-subscriber = "0.3.18"
url = "2.5.2"
uuid = { version = "1.10.0", features = ["v5"] }
zitadel-rust-client = { git = "https://github.com/famedly/zitadel-rust-client", version = "0.1.0" }
wiremock = "0.6.2"
csv = "1.3.0"
tempfile = "3.12.0"
futures = "0.3.31"
ldap3 = { version = "0.11.1", default-features = false, features = ["tls-native"] }
native-tls = "0.2.12"
hex = "0.4.3"

[dependencies.tonic]
version = "*"
features = ["tls-roots"]

[dependencies.reqwest]
version = "*"
features = ["rustls-tls-native-roots", "json"]

[build-dependencies]
vergen = { version = "8.2.6", features = ["git", "gitcl", "build"] } # vergen passes metadata like the version and git commit hash to cargo as a compile-time environment variables

[dev-dependencies]
indoc = "2.0.5"
ldap3 = { version = "0.11.1", default-features = false, features = ["tls-native"] }
serde_yaml = "0.9.34"
tempfile = "3.10.1"
test-log = { version = "0.2.16", features = ["trace", "unstable"] }

[lints.rust]
dead_code = "warn"
missing_debug_implementations = "warn"
missing_docs = "warn"
trivial_casts = "warn"
trivial_numeric_casts = "warn"
unused_extern_crates = "warn"
unused_import_braces = "warn"
unused_qualifications = "warn"

[lints.clippy]
tabs_in_doc_comments = "allow"
branches_sharing_code = "warn"
cast_lossless = "warn"
cast_possible_wrap = "warn"
checked_conversions = "warn"
cloned_instead_of_copied = "warn"
create_dir = "warn"
dbg_macro = "warn"
default_trait_access = "warn"
expect_used = "warn"
expl_impl_clone_on_copy = "warn"
fallible_impl_from = "warn"
filetype_is_file = "warn"
filter_map_next = "warn"
flat_map_option = "warn"
float_cmp = "warn"
fn_params_excessive_bools = "warn"
fn_to_numeric_cast_any = "warn"
future_not_send = "warn"
if_then_some_else_none = "warn"
implicit_clone = "warn"
implicit_hasher = "warn"
implicit_saturating_sub = "warn"
imprecise_flops = "warn"
inefficient_to_string = "warn"
items_after_statements = "warn"
iter_not_returning_iterator = "warn"
large_digit_groups = "warn"
large_stack_arrays = "warn"
large_types_passed_by_value = "warn"
lossy_float_literal = "warn"
macro_use_imports = "warn"
manual_let_else = "warn"
manual_ok_or = "warn"
many_single_char_names = "warn"
map_unwrap_or = "warn"
mem_forget = "warn"
#missing_const_for_fn = "warn"
missing_docs_in_private_items = "warn"
must_use_candidate = "warn"
mut_mut = "warn"
mutex_atomic = "warn"
needless_bitwise_bool = "warn"
non_send_fields_in_send_ty = "warn"
option_option = "warn"
path_buf_push_overwrite = "warn"
print_stderr = "warn"
print_stdout = "warn"
ptr_as_ptr = "warn"
range_minus_one = "warn"
range_plus_one = "warn"
rc_buffer = "warn"
rc_mutex = "warn"
redundant_closure_for_method_calls = "warn"
ref_binding_to_reference = "warn"
ref_option_ref = "warn"
return_self_not_must_use = "warn"
same_functions_in_if_condition = "warn"
same_name_method = "warn"
semicolon_if_nothing_returned = "warn"
str_to_string = "warn"
string_to_string = "warn"
suboptimal_flops = "warn"
suspicious_operation_groupings = "warn"
too_many_lines = "warn"
trait_duplication_in_bounds = "warn"
trivially_copy_pass_by_ref = "warn"
type_repetition_in_bounds = "warn"
undocumented_unsafe_blocks = "warn"
unnested_or_patterns = "warn"
unreadable_literal = "warn"
unseparated_literal_suffix = "warn"
unused_async = "warn"
unused_self = "warn"
unwrap_used = "warn"
used_underscore_binding = "warn"
useless_let_if_seq = "warn"
verbose_file_reads = "warn"
